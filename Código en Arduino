#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 
#define SCREEN_HEIGHT 64 
#define OLED_RESET     -1
#define SCREEN_ADDRESS 0x3C 

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

const int trigPin = 9;
const int echoPin = 10;
const int maxDist = 13;

long duracion;
float distancia;
float distanciaSuavizada = maxDist;
float alpha = 0.2;

const int muestras = 5;
const float offsetDist = 1.0; // 1cm abajo

int porcentajeLlenado;
int porcentajeLlenadoAnterior = -1;

const int Motor = 6;

void setup() {
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(Motor, OUTPUT);
  digitalWrite(Motor, LOW);
  Serial.begin(9600);

  // Inicializar OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("No se pudo inicializar la pantalla OLED"));
    while (true);
  }

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("Listo para medir...");
  display.display();
  delay(500);
}

void loop() {
  // Promedio
  float distanciaTotal = 0;
  for (int i = 0; i < muestras; i++) {
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);

    duracion = pulseIn(echoPin, HIGH, 30000); 
    if (duracion == 0) {
      distanciaTotal += maxDist;
    } else {
      distanciaTotal += duracion * 0.034 / 2;
    }

    delay(50);
  }

  distancia = distanciaTotal / muestras;

  // filtro exponencial
  distanciaSuavizada = (alpha * distancia) + ((1 - alpha) * distanciaSuavizada);

  // Calcular el porcentaje de llenado
  if (distanciaSuavizada >= maxDist) {
    porcentajeLlenado = 0;
  } else if (distanciaSuavizada >= (3 + offsetDist)) {
    int porcentajeExacto = 100 - ((distanciaSuavizada - (3 + offsetDist)) * 100 / (maxDist - (3 + offsetDist)));
    porcentajeLlenado = (porcentajeExacto / 10) * 10; // Redondear al m√∫ltiplo de 10
    porcentajeLlenado = constrain(porcentajeLlenado, 0, 100);
  } else {
    porcentajeLlenado = 100;
  }

  if (porcentajeLlenado != porcentajeLlenadoAnterior) {
    porcentajeLlenadoAnterior = porcentajeLlenado;

    // Control del motor, llenado
    if (porcentajeLlenado <= 20) {
      digitalWrite(Motor, HIGH);
    } else if (porcentajeLlenado == 100) {
      digitalWrite(Motor, LOW);
    }

    // Mostrar en OLED
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(1);
    display.println("Nivel del tanque:");
    display.setTextSize(2);
    display.setCursor(20, 20);
    display.print(porcentajeLlenado);
    display.print("%");

    // Barra de nivel
    int barHeight = map(porcentajeLlenado, 0, 100, 0, 40);
    display.drawRect(100, 15, 10, 40, SSD1306_WHITE);
    display.fillRect(101, 55 - barHeight, 8, barHeight, SSD1306_WHITE);

    display.display();
  }

  Serial.print("Distancia (suavizada): ");
  Serial.print(distanciaSuavizada);
  Serial.println(" cm");
  Serial.print("Porcentaje: ");
  Serial.print(porcentajeLlenado);
  Serial.println(" %");

  delay(500);
}
